{"version":3,"sources":["OAuthLink.js","useCurrentUri.js","useWebexOAuth.js","App.js","reportWebVitals.js","index.js"],"names":["OAuthLink","clientID","loginText","redirectURI","webexAPIBaseURL","href","useCurrentUri","useState","currentUri","setCurrentUri","useEffect","redirect_uri","window","location","protocol","host","pathname","endsWith","slice","encodeURIComponent","useWebexOAuth","webexToken","setWebexToken","useQueryParam","StringParam","accessCode","setAccessCode","undefined","App","className","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAceA,MAdf,YAAyE,IAArDC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,gBAGpD,OACE,mCACE,mBACAC,KAAI,UAAKD,EAAL,sBAAkCH,EAAlC,4CAA8EE,EAA9E,oCADJ,SAGGD,O,OCiBMI,MAnBf,WAA0B,IAAD,EACaC,mBAAS,IADtB,mBAChBC,EADgB,KACJC,EADI,KAgBvB,OAbAC,qBAAU,WACR,IAAIC,EAAY,UAAMC,OAAOC,SAASC,SAAtB,aAAmCF,OAAOC,SAASE,MAE/DH,OAAOC,SAASG,WAClBL,GAAgBC,OAAOC,SAASG,UAIlCL,EAAeA,EAAaM,SAAS,KAAON,EAAaO,MAAM,GAAI,GAAKP,EAExEF,EAAcU,mBAAmBR,MAChC,IAEIH,GCGMY,MAff,WAA0B,IAAD,EACab,mBAAS,IADtB,mBAChBc,EADgB,KACJC,EADI,OAEaC,YAAc,OAAQC,KAFnC,mBAEhBC,EAFgB,KAEJC,EAFI,KAYvB,OAPAhB,qBAAU,WACJe,IAAeJ,IACjBC,EAAcG,GACdC,OAAcC,MAEf,CAACF,EAAYJ,EAAYK,IAErBL,G,MCYMO,MA5Bf,WACE,IAAMP,EAAaD,IACbjB,EAAcG,IAEpB,OACE,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAEIR,EAEE,4IAKA,cAAC,EAAD,CACEpB,SAAU6B,oEACV5B,UAAU,iBACVC,YAAaA,EACbC,gBAAiB0B,4CCbhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26caa089.chunk.js","sourcesContent":["function OAuthLink({clientID, loginText, redirectURI, webexAPIBaseURL}) {\n  \n  \n  return (\n    <>\n      <a\n      href={`${webexAPIBaseURL}?client_id=${clientID}&response_type=code&redirect_uri=${redirectURI}&scope=spark%3Aall%20spark%3Akms`}\n      >\n        {loginText}\n      </a>\n    </>\n  );\n}\n\nexport default OAuthLink;","import { useEffect, useState } from 'react';\n\n/**\n * Gets the current URL and encodes it for use as a redirect uri\n * @returns {Hook}\n */\nfunction useCurrentUri() {\n  const [currentUri, setCurrentUri] = useState('');\n\n  useEffect(() => {\n    let redirect_uri = `${window.location.protocol}//${window.location.host}`;\n\n    if (window.location.pathname) {\n      redirect_uri += window.location.pathname;\n    }\n    \n    // Remove trailing slash because Webex OAuth doesn't like trailing slashes\n    redirect_uri = redirect_uri.endsWith('/') ? redirect_uri.slice(0, -1) : redirect_uri;\n\n    setCurrentUri(encodeURIComponent(redirect_uri));\n  }, []);\n\n  return currentUri;\n}\n\nexport default useCurrentUri;","import { useEffect, useState } from 'react';\n\nimport { useQueryParam, StringParam } from 'use-query-params';\n\n/**\n * This function captures the \"code\" querystring returned from an OAuth call\n * and stores it in react state, then clears the querystring for security.\n * \n * @returns {Hook}\n */\nfunction useWebexOAuth() {\n  const [webexToken, setWebexToken] = useState('');\n  const [accessCode, setAccessCode] = useQueryParam('code', StringParam);\n\n  \n  useEffect(() => {\n    if (accessCode && !webexToken) {\n      setWebexToken(accessCode);\n      setAccessCode(undefined);\n    }\n  }, [accessCode, webexToken, setAccessCode]);\n\n  return webexToken;\n}\n\nexport default useWebexOAuth;","import Auth from './OAuthLink';\nimport useCurrentUri from './useCurrentUri';\nimport useWebexOAuth from './useWebexOAuth';\n\nimport './App.css';\n\nfunction App() {\n  const webexToken = useWebexOAuth();  \n  const redirectURI = useCurrentUri();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        { \n          webexToken ? \n          (\n            <div>\n              Congratulations, you are logged in to Webex. User's API token is available in the \"webexToken\" variable.\n            </div>\n          ) : \n          (\n            <Auth \n              clientID={process.env.REACT_APP_WEBEX_CLIENT_ID} \n              loginText=\"Login to Webex\"\n              redirectURI={redirectURI}\n              webexAPIBaseURL={process.env.REACT_APP_WEBEX_BASE_URL}\n            />\n          )\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryParamProvider } from 'use-query-params';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryParamProvider>\n      <App />\n    </QueryParamProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}